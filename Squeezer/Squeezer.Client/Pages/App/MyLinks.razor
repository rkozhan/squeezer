@page "/app/my-links";
@using Squeezer.Client.Layout
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode @(new InteractiveAutoRenderMode(prerender: false))

@layout InteractiveMainLayout

@inject NavigationManager NavigationManager
@inject ILinkService LinkService
@inject IJSRuntime JsRuntime

<PageTitle>My Links | Squeezer</PageTitle>

<SectionContent SectionName="client-heading">
    <h1 class="text-main fw-bold text-center">My Links</h1>
</SectionContent>

<div class="row mt-3">
    <div class="col-12 d-flex justify-content-between align-items-center">
        <h3>@(_showActiveOnly ? "Active" : "All") Links</h3>
        @*<h3>@(ShowActiveOnly ? "Active" : "All") Links</h3>
        <a href="@ShowButtonLinkUrl" class="btn-btn-sm btn-outline-primary">Show @(ShowActiveOnly ? "All" : "Active") Links</a>*@
        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="ToggleActiveOnly">
            @*Show @(ShowActiveOnly ? "All" : "Active") Links*@
            Show @(_showActiveOnly ? "All" : "Active") Links
        </button>
    </div>
</div>

@if (_isLoading)
{
    <Loader />
}
else
{
    <div class="row">

        <QuickGrid ItemsProvider="_linksProvider" Pagination="_paginationState" @ref="_grid">
            <TemplateColumn>
                <div class="p-2 mb-4 border-borrom shadow">
                    <div class="row">
                        <div class="col-sm-6 d-flex">
                            <div class="d-flex flex-column justify-content-center">
                                @if (context.IsActive)
                                {
                                    <i class="material-symbols-outlined text-success fw-bold" title="Active">link</i>
                                }
                                else
                                {
                                    <i class="material-symbols-outlined text-danger fw-bold" title="Inactive">link_off</i>
                                }
                            </div>
                            <div class="vr mx-3"></div>
                            <div class="flex-grow-1">
                                <h5>
                                    <a href="@context.ShortUrl" target="_blank"
                                       class="link-dark" title="@context.ShortUrl">
                                        @context.ShortUrl
                                    </a>
                                    <button type="button" class="btn" title="Copy Short Url to Clipboard" @onclick="()=> CopyLinkAsync(context.ShortUrl)">
                                        <i class="material-symbols-outlined">content_copy</i>
                                    </button>
                                </h5>
                                <small class="d-flex">
                                    <span>
                                        Long Url:
                                        <a href="@context.LongUrl" target="_blank"
                                           class="link-dark" title="@context.LongUrl">
                                            @context.LongUrl
                                        </a>
                                    </span>
                                    <button type="button" class="btn" title="Copy Long Url to Clipboard" @onclick="()=> CopyLinkAsync(context.LongUrl)">
                                        <i class="material-symbols-outlined">content_copy</i>
                                    </button>
                                </small>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <h5>Total Clicks: @context.TotalClicks</h5>
                            <a href="/app/my-links/@context.Id" class="btn btn-main d-flex" style="text-decoration:none;">
                                <i class="material-symbols-outlined me-1">insert_chart</i>
                                <span>View Details</span>
                            </a>
                        </div>
                        <div class="col-sm-3 d-flex flex-column justify-content-center align-items-center gap-2">
                            <button type="button" class="btn btn-outline-primary d-flex" title="Edit Url">
                                <i class="material-symbols-outlined me-1">edit</i>
                                <span>Edit</span>
                            </button>

                            <button type="button" class="btn btn-outline-danger d-flex" title="Delete Url">
                                <i class="material-symbols-outlined me-1">delete</i>
                                <span>Delete</span>
                            </button>

                            <button disabled type="button" class="btn btn-outline-dark d-flex" title="Generate QR-code for a Short Url">
                                <i class="material-symbols-outlined me-1">qr_code</i>
                                <span>Get QR</span>
                            </button>
                        </div>


                    </div>
                </div>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="_paginationState" />
    </div>
}

@code {
    private const int PageSize = 5;

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    private bool _isLoading = false;

    //[SupplyParameterFromQuery(Name = "show")]
    //private string? Show { get; set; } = ShowType.ActiveOnly.ToString();
    //private bool ShowActiveOnly =>
    //    string.IsNullOrWhiteSpace(Show) || Show == ShowType.ActiveOnly.ToString();

    //private string ShowButtonLinkUrl => ShowActiveOnly ? $"app/my-links?show={ShowType.All}"
    //    : $"app/my-links?show={ShowType.ActiveOnly}";

    private bool _showActiveOnly = true;

    private GridItemsProvider<LinkDto>? _linksProvider;

    private QuickGrid<LinkDto>? _grid;

    private PaginationState _paginationState = new() { ItemsPerPage = PageSize };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var userId = authState.User.GetUserId();
        _linksProvider = async request =>
        {
            var (links, count) = await LinkService.GetLinksByUserAsync(
                //"", request.StartIndex, request.Count ?? PageSize, ShowActiveOnly);
                userId, request.StartIndex, request.Count ?? PageSize, _showActiveOnly);

            return GridItemsProviderResult.From(links, count);
        };
    }
    @*protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        if (_grid is not null)
        {
            await _grid.RefreshDataAsync();
        }
        _isLoading = false;
    }*@

    private async Task ToggleActiveOnly()
    {
        _showActiveOnly = !_showActiveOnly;

        _isLoading = true;
        await _grid!.RefreshDataAsync();
        _isLoading = false;
    }

    private async Task CopyLinkAsync(string linkUrl)
    {
        await JsRuntime.InvokeVoidAsync("window.copyToClipboard", linkUrl);
    }

    enum ShowType
    {
        All,
        ActiveOnly
    }
}
