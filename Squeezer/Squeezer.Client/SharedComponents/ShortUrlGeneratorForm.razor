@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Squeezer.Client.Services

@inject NavigationManager NavigationManager
@inject ILinkService LinkService
@inject SessionStorageService StorageService

<div class="">
    <EditForm Model="_model" OnValidSubmit="ShortenUrlAsync">
        <DataAnnotationsValidator />
        <h2>Make a Long URL shorter</h2>
        <p>Enter or paste a long URL</p>
        <div class="mb-3">
            <InputText @bind-Value="_model.LongUrl" class="form-control" placeholder="https://some-long.url/to-make/shorter"/>
            <ValidationMessage For="@(() => _model.LongUrl)" />
        </div>
        <div class="mb-3">
            <button type="submit" class="btn btn-main" disabled="@_isProcessing">
                @(_isProcessing? "Shortening url..." : "Shorten URL")
            </button>
        </div>
    </EditForm>
</div>

@if(_isProcessing)
{
    <Loader />
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    private ShortUrlGeneratorModel _model = new ();
    private bool _isProcessing;

    private async Task ShortenUrlAsync()
    {
        _isProcessing = true;

        var authState = await AuthStateTask;
        if (authState.User.Identity is null || !authState.User.Identity.IsAuthenticated)
        {
            //is not logged in
            //save the long url in a session storage (to retrieve after login)
            await StorageService.SaveAsync(SessionStorageService.LongUrlKey, _model.LongUrl);

            //Navigate to Login Page
            NavigationManager.NavigateTo("Account/Login");
            return;
        }

        var userId = authState.User.GetUserId();

        var dto = new LinkCreateDto(_model.LongUrl, userId);

        var link = await LinkService.CreateLinkAsync(dto);

        _isProcessing = false;
    }
    class ShortUrlGeneratorModel
    {
        [Required, Length(10, 250)]
        public string LongUrl { get; set; }
    }
}
